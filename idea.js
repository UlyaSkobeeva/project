//–±—É—Ä–≥–µ—Ä
document.querySelector(".burger").addEventListener("click", function () {
  this.classList.toggle("active");
  document.querySelector(".header-menu").classList.toggle("open");
});

//–Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
const form = document.querySelector("#form");
const taskInput = document.querySelector("#taskInput");
const tasksList = document.querySelector("#tasksList");

let tasks = [];

if (localStorage.getItem("tasks")) {
  tasks = JSON.parse(localStorage.getItem("tasks"));
}

tasks.forEach(function (task) {
  //—Ñ–æ—Ä–º–∏—Ä—É–µ–º css –∫–ª–∞—Å—Å
  const cssClass = task.done
    ? "btn-action done btn-action--done"
    : "btn-action done";
  //–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞
  saveToLocalStorage();

  //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const taskHTML = `
    <li id = "${task.id}" class="list-group-item  task-item">
    <span class="task-title">${task.text}</span>
    <div class="task-item__buttons">
    <button type="button " data-action="done" class="${cssClass}">
    ü§ç 0
  </button>
        <button type="button" data-action="delete" class="btn-action">
        ‚ùå
        </button>
    </div>
  </li>`;

  //–¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  tasksList.insertAdjacentHTML("beforeend", taskHTML);
});

//–æ—Ç–ø—Ä–∞–≤–∏—Ç—å
form.addEventListener("submit", addTask);

//—É–¥–∞–ª–∏—Ç—å
tasksList.addEventListener("click", deleteTask);

//–ª–∞–π–∫
tasksList.addEventListener("click", doneTask);

function addTask(event) {
  //–æ—Ç–º–µ–Ω—è–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–æ—Ä–º—É (–Ω–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—É)
  event.preventDefault();

  //–¥–æ—Å—Ç–∞—Ç—å —Ç–µ–∫—Å—Ç –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
  const taskText = taskInput.value;

  //–µ—Å–ª–∏ –≤ –ø–æ–ª–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç, —Ç–æ –Ω–µ –≤—ã–≤–æ–¥–∏—Ç—å
  if (taskInput.value.length === 0) {
    return;
  }
  //–∑–∞–¥–∞—á–∞ –≤ –≤–∏–¥–µ –æ–±—ä–µ–∫—Ç–∞
  const newTask = {
    id: Date.now(),
    text: taskText,
    done: false,
  };

  //–¥–æ–±–∞–≤–∏—Ç—å –æ–±—ä–µ–∫—Ç –≤ –º–∞—Å—Å–∏–≤ —Å –∑–∞–¥–∞—á–∞–º–∏
  tasks.push(newTask);
  console.log(tasks);

  //—Ñ–æ—Ä–º–∏—Ä—É–µ–º css –∫–ª–∞—Å—Å
  const cssClass = newTask.done
    ? "btn-action done btn-action--done"
    : "btn-action done";
  //–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞
  saveToLocalStorage();

  //—Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –¥–ª—è –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏
  const taskHTML = `
    <li id = "${newTask.id}" class="list-group-item  task-item">
    <span class="task-title">${newTask.text}</span>
    <div class="task-item__buttons">
    <button type="button " data-action="done" class="${cssClass}">
    ü§ç 0
  </button>
        <button type="button" data-action="delete" class="btn-action">
        ‚ùå
        </button>
    </div>
  </li>`;

  //–¥–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–º–µ—Ç–∫—É –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É
  tasksList.insertAdjacentHTML("beforeend", taskHTML);

  //–æ—á–∏—Å—Ç–∏—Ç—å –ø–æ–ª–µ –≤–≤–æ–¥–∞ –∏ –≤–æ–∑–≤—Ä–∞—Ç–∏—Ç—å –Ω–∞ –Ω–µ–≥–æ —Ñ–æ–∫—É—Å
  taskInput.value = "";

  taskInput.focus();

  saveToLocalStorage();
}

function deleteTask(event) {
  if (event.target.dataset.action === "delete") {
    const parenNode = event.target.closest(".list-group-item");

    //–æ–ø—Ä–µ–¥–µ–ª—è–µ–º –∞–π–¥–∏ –∑–∞–¥–∞—á–∏
    const id = Number(parenNode.id);
    //–Ω–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å –∑–∞–¥–∞—á–∏ –≤ –º–∞—Å—Å–∏–≤–µ
    const index = tasks.findIndex(function (task) {
      if (task.id === id) {
        return true;
      }
      //   return task.id === id;
    });

    if (window.confirm("–í—ã —É–≤–µ—Ä–µ–Ω—ã —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–ø–∏—Å—å?")) {
      //—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ –º–∞—Å—Å–∏–≤–∞
      tasks.splice(index, 1);

      //–¥–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –±—Ä–∞—É–∑–µ—Ä–∞
      saveToLocalStorage();

      //—É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É –∏–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
      parenNode.remove();
    }
  }
}

function saveToLocalStorage() {
  localStorage.setItem("tasks", JSON.stringify(tasks));
}

//–ª–∞–π–∫
function doneTask(event) {
  //–ø—Ä–æ–≤–µ—Ä–∏—Ç—å —á—Ç–æ –∫–ª–∏–∫ –≤—ã–ø–æ–ª–µ–Ω–µ–Ω –ø–æ –∫–Ω–æ–ø–∫–µ –ª–∞–π–∫

  if (event.target.dataset.action === "done") {
    const parenNode = event.target.closest(".list-group-item");

    //–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–π–¥–∏ –∑–∞–¥–∞—á–∏
    const id = Number(parenNode.id);

    const task = tasks.find(function (task) {
      if (task.id === id) {
        return true;
      }
    });
    task.done = !task.done;
    saveToLocalStorage();

    const btnDone = parenNode.querySelector(".done");

    btnDone.classList.toggle("btn-action--done");
  }
}
